!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Application	lib/Application.js	/^class Application {$/;"	c
BatchDeleteView	lib/View/BatchDeleteView.js	/^class BatchDeleteView extends View {$/;"	c
BooleanField	lib/Field/BooleanField.js	/^class BooleanField extends ChoiceField {$/;"	c
Case	lib/Utils/stringUtils.js	/^    camelCase: function(text) {$/;"	c
ChoiceField	lib/Field/ChoiceField.js	/^class ChoiceField extends Field {$/;"	c
ChoicesField	lib/Field/ChoicesField.js	/^class ChoicesField extends ChoiceField {$/;"	c
Collection	lib/Collection.js	/^class Collection extends ListView {$/;"	c
CompleteOptions	lib/Field/ReferenceField.js	/^        this._remoteCompleteOptions= {$/;"	c
CreateView	lib/View/CreateView.js	/^class CreateView extends View {$/;"	c
CustomField	tests/lib/FactoryTest.js	/^            class CustomField extends Field {$/;"	c
Dashboard	lib/Dashboard.js	/^class Dashboard {$/;"	c
DashboardView	lib/View/DashboardView.js	/^class DashboardView extends ListView {$/;"	c
Data	lib/Queries/ReadQueries.js	/^                let referencedData = {},$/;"	c
DataStore	lib/DataStore/DataStore.js	/^class DataStore {$/;"	c
DateField	lib/Field/DateField.js	/^class DateField extends Field {$/;"	c
DateTimeField	lib/Field/DateTimeField.js	/^class DateTimeField extends DateField {$/;"	c
DeleteView	lib/View/DeleteView.js	/^class DeleteView extends View {$/;"	c
EditView	lib/View/EditView.js	/^class EditView extends View {$/;"	c
EmailField	lib/Field/EmailField.js	/^class EmailField extends Field {$/;"	c
EmbeddedListField	lib/Field/EmbeddedListField.js	/^class EmbeddedListField extends Field {$/;"	c
Entity	lib/Entity/Entity.js	/^class Entity {$/;"	c
Entity	tests/lib/FactoryTest.js	/^            var dummyEntity = { name: () => 'foo' };$/;"	c
Entity	tests/lib/Queries/WriteQueriesTest.js	/^            let rawEntity = {name: 'Mizu'};$/;"	c
Entity	tests/lib/Queries/WriteQueriesTest.js	/^            updatedEntity = {id: 3, name: 'Mizute'};$/;"	c
Entity	tests/lib/Queries/WriteQueriesTest.js	/^        let rawEntity = {id: 3, name: 'Mizu'},$/;"	c
Entry	lib/Entry.js	/^        let restEntry = clone(this.values);$/;"	c
Entry	lib/Entry.js	/^class Entry {$/;"	c
EvenFailed	tests/mock/PromisesResolver.js	/^    allEvenFailed: function() { return buildPromise([]); },$/;"	c
ExportView	lib/View/ExportView.js	/^class ExportView extends ListView {$/;"	c
Factory	lib/Factory.js	/^class Factory {$/;"	c
Field	lib/Field/Field.js	/^class Field {$/;"	c
Fields	lib/Queries/ReadQueries.js	/^            let filterFields = {};$/;"	c
FileField	lib/Field/FileField.js	/^class FileField extends Field {$/;"	c
FilterValues	lib/Queries/ReadQueries.js	/^        let allFilterValues = {};$/;"	c
Filters	lib/View/ListView.js	/^        this._permanentFilters = {};$/;"	c
FloatField	lib/Field/FloatField.js	/^class FloatField extends NumberField {$/;"	c
Func	tests/lib/Field/FieldTest.js	/^            var barFunc = function(a) { return a + 1; }$/;"	c
Func	tests/lib/Field/FieldTest.js	/^            var fooFunc = function(a) { return a; }$/;"	c
Information	lib/Field/FileField.js	/^        this._uploadInformation = {$/;"	c
JsonField	lib/Field/JsonField.js	/^class JsonField extends Field {$/;"	c
Link	lib/Field/Field.js	/^        this._detailLink = (name === 'id');$/;"	c
ListView	lib/View/ListView.js	/^class ListView extends View {$/;"	c
Menu	lib/Menu/Menu.js	/^class Menu {$/;"	c
MenuView	lib/View/MenuView.js	/^class MenuView extends View {$/;"	c
NumberField	lib/Field/NumberField.js	/^class NumberField extends Field {$/;"	c
Object	lib/Utils/objectProperties.js	/^                let flatObject = cloneAndFlatten(object[name]);$/;"	c
Object	tests/lib/Utils/objectPropertiesTest.js	/^        let flatObject = cloneAndFlatten(object);$/;"	c
Object	tests/lib/Utils/objectPropertiesTest.js	/^        let nestedObject = cloneAndNest(object);$/;"	c
PasswordField	lib/Field/PasswordField.js	/^class PasswordField extends Field {$/;"	c
PromisesResolver	lib/Utils/PromisesResolver.js	/^class PromisesResolver {$/;"	c
PromisesResolver	tests/mock/PromisesResolver.js	/^var PromisesResolver = {$/;"	c
Queries	lib/Queries/Queries.js	/^class Queries {$/;"	c
Query	lib/Field/ReferenceField.js	/^     *               searchQuery: function(search) { return { q: search }; }$/;"	c
ReadQueries	lib/Queries/ReadQueries.js	/^class ReadQueries extends Queries {$/;"	c
ReferenceField	lib/Field/ReferenceField.js	/^class ReferenceField extends Field {$/;"	c
ReferenceManyField	lib/Field/ReferenceManyField.js	/^class ReferenceManyField extends ReferenceField {$/;"	c
ReferencedListField	lib/Field/ReferencedListField.js	/^class ReferencedListField extends ReferenceField {$/;"	c
RouteFor	tests/lib/Queries/ReadQueriesTest.js	/^            getRouteFor: (entity, generatedUrl, viewType, id) => {$/;"	c
RouteFor	tests/lib/Queries/WriteQueriesTest.js	/^            getRouteFor: (entity, generatedUrl, viewType, id) => {$/;"	c
ShowView	lib/View/ShowView.js	/^class ShowView extends View {$/;"	c
SimpleReference	lib/DataStore/DataStore.js	/^        fillSimpleReference = typeof (fillSimpleReference) === 'undefined' ? false : fillSimpleReference;$/;"	c
Template	lib/Application.js	/^        this._customTemplate = function(viewName) {};$/;"	c
TemplateField	lib/Field/TemplateField.js	/^class TemplateField extends Field {$/;"	c
TextField	lib/Field/TextField.js	/^class TextField extends Field {$/;"	c
Values	lib/Entry.js	/^        this.listValues = {};$/;"	c
Values	lib/Queries/ReadQueries.js	/^                filterValues = permanentFilters(search);$/;"	c
Values	tests/lib/DataStore/DataStore.js	/^            var referencedValues = {$/;"	c
View	lib/View/View.js	/^class View {$/;"	c
Wrapper	tests/lib/Queries/ReadQueriesTest.js	/^        restWrapper = {},$/;"	c
Wrapper	tests/lib/Queries/WriteQueriesTest.js	/^        restWrapper = {},$/;"	c
WriteQueries	lib/Queries/WriteQueries.js	/^class WriteQueries extends Queries {$/;"	c
WysiwygField	lib/Field/WysiwygField.js	/^class WysiwygField extends Field {$/;"	c
_attributes	lib/Field/Field.js	/^        this._attributes = {};$/;"	o
_collections	lib/Dashboard.js	/^        this._collections = {};$/;"	o
_entries	lib/DataStore/DataStore.js	/^        this._entries = {};$/;"	o
_filters	lib/Queries/ReadQueries.js	/^            params._filters = {};$/;"	o
_init	lib/Factory.js	/^    _init() {$/;"	f
_initViews	lib/Entity/Entity.js	/^    _initViews() {$/;"	f
_permanentFilters	lib/View/ListView.js	/^        this._permanentFilters = {};$/;"	o
_remoteCompleteOptions	lib/Field/ReferenceField.js	/^        this._remoteCompleteOptions= {$/;"	o
_uploadInformation	lib/Field/FileField.js	/^        this._uploadInformation = {$/;"	o
_validation	lib/Field/Field.js	/^        this._validation = { required: false, minlength : 0, maxlength : 99999 };$/;"	o
_views	lib/Entity/Entity.js	/^        this._views = {$/;"	o
actions	lib/View/ListView.js	/^    actions(actions) {$/;"	f
actions	lib/View/View.js	/^    actions(actions) {$/;"	f
active	lib/Menu/Menu.js	/^    active(activeFunc) {$/;"	f
addChild	lib/Menu/Menu.js	/^    addChild(child) {$/;"	f
addCollection	lib/Dashboard.js	/^    addCollection(collection) {$/;"	f
addEntity	lib/Application.js	/^    addEntity(entity) {$/;"	f
addEntry	lib/DataStore/DataStore.js	/^    addEntry(name, entry) {$/;"	f
addField	lib/View/View.js	/^    addField(field) {$/;"	f
address	tests/lib/EntryTest.js	/^                address: { number: 21, street: 'JumpStreet', city: 'Vancouver' } \/\/ mapped as JSON field => not flattenable$/;"	o
address	tests/lib/EntryTest.js	/^                address: { number: 21, street: 'JumpStreet', city: 'Vancouver' }$/;"	o
address	tests/lib/EntryTest.js	/^                address: { number: null, street: null, city: null }$/;"	o
afterEach	tests/lib/Queries/ReadQueriesTest.js	/^        afterEach(function() {$/;"	f
allEvenFailed	lib/Utils/PromisesResolver.js	/^    static allEvenFailed(promises) {$/;"	f
allEvenFailed	tests/mock/PromisesResolver.js	/^    allEvenFailed: function() { return buildPromise([]); },$/;"	m
alwaysFalse	lib/Menu/Menu.js	/^function alwaysFalse() {$/;"	f
application	lib/Factory.js	/^    application(name, debug) {$/;"	f
attributes	lib/Field/Field.js	/^    attributes(attributes) {$/;"	f
author	tests/lib/EntryTest.js	/^                author: { name: 'John Doe' }$/;"	o
autoClose	lib/Menu/Menu.js	/^    autoClose() {$/;"	f
b	lib/Utils/objectProperties.js	/^ *     \/\/ { a: 1, b: { c: 2 }, d: { e: 3, f: { g: 4, h: 5 } } }$/;"	o
b	lib/Utils/objectProperties.js	/^ *     cloneAndFlatten({ a: 1, b: { c: 2 }, d: { e: 3, f: { g: 4, h: 5 } }, i: { j: 6 } }, ['i'])$/;"	o
b	tests/lib/Utils/objectPropertiesTest.js	/^                                      { a: 1, b: { c: 2 }, d: { e: 3, f: { g: 4, h: 5 } } })$/;"	o
b	tests/lib/Utils/objectPropertiesTest.js	/^        assert.deepEqual(cloneAndFlatten({ a: 1, b: { c: 2 }, d: { e: 3, f: { g: 4, h: 5 } } }),$/;"	o
b	tests/lib/Utils/objectPropertiesTest.js	/^        assert.deepEqual(cloneAndFlatten({ a: 1, b: { c: 2 }, d: { e: 3, f: { g: 4, h: 5 } } }, ['d']),$/;"	o
babel	package.json	/^    "babel": "^5.5.3",$/;"	f
barFunc	tests/lib/Field/FieldTest.js	/^            var barFunc = function(a) { return a + 1; }$/;"	f
baseApiUrl	lib/Application.js	/^    baseApiUrl(url) {$/;"	f
baseApiUrl	lib/Entity/Entity.js	/^    baseApiUrl(baseApiUrl) {$/;"	f
batchActions	lib/View/ListView.js	/^    batchActions(actions) {$/;"	f
batchDelete	lib/Queries/WriteQueries.js	/^    batchDelete(view, entityIds) {$/;"	f
batchDeleteView	lib/Entity/Entity.js	/^    batchDeleteView() {$/;"	f
beforeEach	tests/lib/DataStore/DataStore.js	/^    beforeEach(function() {$/;"	f
beforeEach	tests/lib/Entity/EntityTest.js	/^        beforeEach(function() {$/;"	f
beforeEach	tests/lib/Field/FieldTest.js	/^        beforeEach(function() {$/;"	f
beforeEach	tests/lib/Queries/ReadQueriesTest.js	/^        beforeEach(function() {$/;"	f
buildDashboardFromEntities	lib/Application.js	/^    buildDashboardFromEntities() {$/;"	f
buildMenuFromEntities	lib/Application.js	/^    buildMenuFromEntities() {$/;"	f
buildPromise	tests/mock/mixins.js	/^function buildPromise(output) {$/;"	f
camelCase	lib/Utils/stringUtils.js	/^    camelCase: function(text) {$/;"	m
catch	tests/lib/FactoryTest.js	/^            } catch(e) {$/;"	f
chai	package.json	/^    "chai": "^2.3.0",$/;"	f
children	lib/Menu/Menu.js	/^    children() {$/;"	f
choices	lib/Field/ChoiceField.js	/^    choices(choices) {$/;"	f
clone	lib/Utils/objectProperties.js	/^export function clone(object) {$/;"	f
cloneAndFlatten	lib/Utils/objectProperties.js	/^export function cloneAndFlatten(object, excludedProperties = []) {$/;"	f
cloneAndNest	lib/Utils/objectProperties.js	/^export function cloneAndNest(object) {$/;"	f
collection	lib/Factory.js	/^    collection(entity) {$/;"	f
collections	lib/Dashboard.js	/^    collections(collections) {$/;"	f
constructor	lib/Application.js	/^    constructor(title='ng-admin', debug=true) {$/;"	f
constructor	lib/Dashboard.js	/^    constructor() {$/;"	f
constructor	lib/DataStore/DataStore.js	/^    constructor() {$/;"	f
constructor	lib/Entity/Entity.js	/^    constructor(name) {$/;"	f
constructor	lib/Entry.js	/^    constructor(entityName, values, identifierValue) {$/;"	f
constructor	lib/Factory.js	/^    constructor() {$/;"	f
constructor	lib/Field/BooleanField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/ChoiceField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/ChoicesField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/DateField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/DateTimeField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/EmailField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/EmbeddedListField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/Field.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/FileField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/FloatField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/JsonField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/NumberField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/PasswordField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/ReferenceField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/ReferenceManyField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/ReferencedListField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/TemplateField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/TextField.js	/^    constructor(name) {$/;"	f
constructor	lib/Field/WysiwygField.js	/^    constructor(name) {$/;"	f
constructor	lib/Menu/Menu.js	/^    constructor() {$/;"	f
constructor	lib/Queries/Queries.js	/^    constructor(RestWrapper, PromisesResolver, Application) {$/;"	f
constructor	lib/View/BatchDeleteView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/CreateView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/DeleteView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/EditView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/ExportView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/ListView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/MenuView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/ShowView.js	/^    constructor(name) {$/;"	f
constructor	lib/View/View.js	/^    constructor(name) {$/;"	f
constructor	tests/lib/FactoryTest.js	/^                constructor(name) {$/;"	f
createArrayFromRest	lib/Entry.js	/^    static createArrayFromRest(restEntries, fields, entityName, identifierName) {$/;"	f
createForFields	lib/Entry.js	/^    static createForFields(fields, entityName) {$/;"	f
createFromRest	lib/Entry.js	/^    static createFromRest(restEntry, fields = [], entityName = '', identifierName = 'id') {$/;"	f
createMethod	lib/Entity/Entity.js	/^    createMethod(createMethod) {$/;"	f
createOne	lib/Queries/WriteQueries.js	/^    createOne(view, rawEntity) {$/;"	f
creationView	lib/Entity/Entity.js	/^    creationView() {$/;"	f
cssClasses	lib/Field/Field.js	/^    cssClasses(classes) {$/;"	f
cssClasses	tests/lib/Field/FieldTest.js	/^            field.cssClasses(function() { return 'foo bar'; });$/;"	f
customTemplate	lib/Application.js	/^        this._customTemplate = function(viewName) {};$/;"	f
customTemplate	lib/Application.js	/^    customTemplate(customTemplate) {$/;"	f
d	tests/lib/Utils/objectPropertiesTest.js	/^                                         { a: 1, 'b.c': 2, d: { e: 3, f: { g: 4, h: 5 } } })$/;"	o
dashboard	lib/Application.js	/^    dashboard(dashboard) {$/;"	f
dashboard	lib/Factory.js	/^    dashboard() {$/;"	f
dashboardView	lib/Entity/Entity.js	/^    dashboardView() {$/;"	f
data	tests/lib/ApplicationTest.js	/^                    data: {$/;"	o
data	tests/lib/Queries/ReadQueriesTest.js	/^                data: {$/;"	o
datagridName	lib/Field/ReferenceField.js	/^    datagridName() {$/;"	f
debug	lib/Application.js	/^    debug(debug) {$/;"	f
defaultErrorMessage	lib/Application.js	/^    defaultErrorMessage(response) {$/;"	f
defaultValue	lib/Field/Field.js	/^    defaultValue(defaultValue) {$/;"	f
deleteMethod	lib/Entity/Entity.js	/^    deleteMethod(deleteMethod) {$/;"	f
deleteOne	lib/Queries/WriteQueries.js	/^    deleteOne(view, entityId) {$/;"	f
deletionView	lib/Entity/Entity.js	/^    deletionView() {$/;"	f
describe	tests/lib/ApplicationTest.js	/^    describe('entity', function () {$/;"	f
describe	tests/lib/ApplicationTest.js	/^    describe('getErrorMessageFor', function () {$/;"	f
describe	tests/lib/ApplicationTest.js	/^    describe('getRouteFor', function() {$/;"	f
describe	tests/lib/ApplicationTest.js	/^    describe('layout', function() {$/;"	f
describe	tests/lib/ApplicationTest.js	/^describe('Application', function() {$/;"	f
describe	tests/lib/DataStore/DataStore.js	/^    describe('fillReferencesValuesFromCollection', function() {$/;"	f
describe	tests/lib/DataStore/DataStore.js	/^    describe('getChoices', function () {$/;"	f
describe	tests/lib/DataStore/DataStore.js	/^    describe('getReferenceChoicesById', function () {$/;"	f
describe	tests/lib/DataStore/DataStore.js	/^describe('DataStore', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('createMethod', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('deleteMethod', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('identifier', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('label', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('retrieveMethod', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('updateMethod', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^    describe('views', function() {$/;"	f
describe	tests/lib/Entity/EntityTest.js	/^describe('Entity', function() {$/;"	f
describe	tests/lib/EntryTest.js	/^describe('Entry', function() {$/;"	f
describe	tests/lib/FactoryTest.js	/^    describe('field', function() {$/;"	f
describe	tests/lib/FactoryTest.js	/^describe('Factory', function() {$/;"	f
describe	tests/lib/Field/FieldTest.js	/^    describe('detailLink', function() {$/;"	f
describe	tests/lib/Field/FieldTest.js	/^    describe('getCssClasses', function() {$/;"	f
describe	tests/lib/Field/FieldTest.js	/^    describe('label', function() {$/;"	f
describe	tests/lib/Field/FieldTest.js	/^describe('Field', function() {$/;"	f
describe	tests/lib/Field/ReferenceFieldTest.js	/^    describe('detailLink', function() {$/;"	f
describe	tests/lib/Field/ReferenceFieldTest.js	/^    describe('getIdentifierValues', function () {$/;"	f
describe	tests/lib/Field/ReferenceFieldTest.js	/^    describe('getSortFieldName', function () {$/;"	f
describe	tests/lib/Field/ReferenceFieldTest.js	/^describe('ReferenceField', function() {$/;"	f
describe	tests/lib/Field/ReferencedListFieldTest.js	/^describe('ReferencedListField', function() {$/;"	f
describe	tests/lib/Field/TemplateFieldTest.js	/^describe('TemplateField', function() {$/;"	f
describe	tests/lib/Queries/ReadQueriesTest.js	/^    describe('getRecordsByIds', function() {$/;"	f
describe	tests/lib/View/ListViewTest.js	/^describe('ListView', function() {$/;"	f
describe	tests/lib/View/MenuViewTest.js	/^    describe('icon', function() {$/;"	f
describe	tests/lib/View/MenuViewTest.js	/^describe('MenuView', function() {$/;"	f
describe	tests/lib/View/ViewTest.js	/^describe('View', function() {$/;"	f
description	lib/View/View.js	/^    description() {$/;"	f
detailLink	lib/Field/Field.js	/^    set detailLink(isDetailLink) {$/;"	f
detailLinkRoute	lib/Field/Field.js	/^    detailLinkRoute(route) {$/;"	f
devDependencies	package.json	/^  "devDependencies": {$/;"	f
disable	lib/View/View.js	/^    disable() {$/;"	f
doPrepare	lib/View/View.js	/^    doPrepare() {$/;"	f
editable	lib/Field/Field.js	/^    editable(editable) {$/;"	f
editionView	lib/Entity/Entity.js	/^    editionView() {$/;"	f
empty	lib/Utils/PromisesResolver.js	/^    static empty(value) {$/;"	f
empty	tests/mock/PromisesResolver.js	/^    empty: function() { return buildPromise(); }$/;"	m
enable	lib/View/View.js	/^    enable() {$/;"	f
enabled	lib/View/MenuView.js	/^    get enabled() {$/;"	f
enabled	lib/View/View.js	/^    get enabled() {$/;"	f
engines	package.json	/^  "engines": {$/;"	f
entities	lib/Application.js	/^    get entities() {$/;"	f
entity	lib/Factory.js	/^    entity(name) {$/;"	f
entityName	lib/Entry.js	/^    get entityName() {$/;"	f
errorMessage	lib/Application.js	/^    errorMessage(errorMessage) {$/;"	f
errorMessage	lib/Entity/Entity.js	/^    errorMessage(errorMessage) {$/;"	f
errorMessage	lib/View/View.js	/^    errorMessage(errorMessage) {$/;"	f
errorMessage	tests/lib/ApplicationTest.js	/^            app.errorMessage(function (response) {$/;"	f
errorMessage	tests/lib/ApplicationTest.js	/^            entity.errorMessage(function (response) {$/;"	f
errorMessage	tests/lib/ApplicationTest.js	/^            entity.listView().errorMessage(function (response) {$/;"	f
exportFields	lib/View/ListView.js	/^    exportFields(exportFields) {$/;"	f
exportView	lib/Entity/Entity.js	/^    exportView() {$/;"	f
field	lib/Factory.js	/^    field(name, type) {$/;"	f
fields	lib/View/View.js	/^    fields() {$/;"	f
fillFilteredReferencedData	lib/Queries/ReadQueries.js	/^    fillFilteredReferencedData(apiCalls, references, rawValues) {$/;"	f
fillOptimizedReferencedData	lib/Queries/ReadQueries.js	/^    fillOptimizedReferencedData(apiCalls, references) {$/;"	f
fillReferencesValuesFromCollection	lib/DataStore/DataStore.js	/^    fillReferencesValuesFromCollection(collection, referencedValues, fillSimpleReference) {$/;"	f
fillReferencesValuesFromEntry	lib/DataStore/DataStore.js	/^    fillReferencesValuesFromEntry(entry, referencedValues, fillSimpleReference) {$/;"	f
filters	lib/Field/ReferenceField.js	/^    filters(filters) {$/;"	f
filters	lib/View/ListView.js	/^    filters(filters) {$/;"	f
flatten	lib/View/View.js	/^    static flatten(arg) {$/;"	f
flattenable	lib/Field/Field.js	/^    flattenable() {$/;"	f
fooFunc	tests/lib/Field/FieldTest.js	/^            var fooFunc = function(a) { return a; }$/;"	f
for	lib/DataStore/DataStore.js	/^                for (let i in identifier) {$/;"	f
for	lib/DataStore/DataStore.js	/^        for (let i = 0, l = collection.length; i < l; i++) {$/;"	f
for	lib/DataStore/DataStore.js	/^        for (let i = 0, l = entries.length ; i < l ; i++) {$/;"	f
for	lib/DataStore/DataStore.js	/^        for (let referenceField in referencedValues) {$/;"	f
for	lib/Field/Field.js	/^        for (let i in this._maps) {$/;"	f
for	lib/Field/Field.js	/^        for (let i in this._transforms) {$/;"	f
for	lib/Field/Field.js	/^        for (let property in validation) {$/;"	f
for	lib/Field/ReferenceField.js	/^                for (let j in identifier) {$/;"	f
for	lib/Field/ReferenceField.js	/^        for (let i = 0, l = rawValues.length ; i < l ; i++) {$/;"	f
for	lib/Field/ReferencedListField.js	/^        for (let i = 0, l = this._targetFields.length ; i < l ; i++) {$/;"	f
for	lib/Queries/ReadQueries.js	/^                    for (let k in identifiers) {$/;"	f
for	lib/Queries/ReadQueries.js	/^                for (let i in referencedLists) {$/;"	f
for	lib/Queries/ReadQueries.js	/^                for (let j in references) {$/;"	f
for	lib/Queries/ReadQueries.js	/^                for (name in results[0]) {$/;"	f
for	lib/Queries/ReadQueries.js	/^                for (name in results[1]) {$/;"	f
for	lib/Queries/ReadQueries.js	/^            for (filterName in filterValues) {$/;"	f
for	lib/Queries/ReadQueries.js	/^            for (let k in identifiers) {$/;"	f
for	lib/Queries/ReadQueries.js	/^        for (let i in referencedLists) {$/;"	f
for	lib/Queries/ReadQueries.js	/^        for (let i in references) {$/;"	f
for	lib/Utils/PromisesResolver.js	/^                    for (let i in states) {$/;"	f
for	lib/Utils/orderElement.js	/^        for (objectKey in input) {$/;"	f
for	lib/View/ListView.js	/^        for (let i = 0, c = lists.length ; i < c ; i++) {$/;"	f
for	lib/View/View.js	/^            for (let fieldName in arg) {$/;"	f
format	lib/Field/DateField.js	/^    format(value) {$/;"	f
format	lib/Field/NumberField.js	/^    format(value) {$/;"	f
fractionSize	lib/Field/NumberField.js	/^    fractionSize(decimals) {$/;"	f
function	lib/Application.js	/^        this._customTemplate = function(viewName) {};$/;"	f
function	lib/Field/DateField.js	/^        this._parse = function(date) {$/;"	f
function	lib/Field/DateTimeField.js	/^        this._parse = function(date) {$/;"	f
function	lib/Field/ReferenceField.js	/^     *               searchQuery: function(search) { return { q: search }; }$/;"	f
function	lib/Utils/orderElement.js	/^    order: function (input) {$/;"	f
function	lib/Utils/stringUtils.js	/^        return text.replace(\/[-_.\\s](.)\/g, function (match, group1) {$/;"	f
function	lib/Utils/stringUtils.js	/^    camelCase: function(text) {$/;"	f
function	tests/lib/ApplicationTest.js	/^        it('should call url() defined in the entity if it\\'s a function', function () {$/;"	f
function	tests/lib/ApplicationTest.js	/^        it('should call url() defined in the view if it\\'s a function', function () {$/;"	f
function	tests/lib/Entity/EntityTest.js	/^    describe('readOnly()', function() {$/;"	f
function	tests/lib/EntryTest.js	/^    describe('createFromRest()', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^            var barFunc = function(a) { return a + 1; }$/;"	f
function	tests/lib/Field/FieldTest.js	/^            var fooFunc = function(a) { return a; }$/;"	f
function	tests/lib/Field/FieldTest.js	/^        it('should return an class string as set by cssClasses(array)', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^        it('should return an class string as set by cssClasses(function)', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^        it('should return an class string as set by cssClasses(string)', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^    describe('getMappedValue()', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^    describe('getTemplateValue()', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^    describe('map()', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^    describe('template()', function() {$/;"	f
function	tests/lib/Field/FieldTest.js	/^    describe('validation()', function() {$/;"	f
function	tests/lib/Field/TemplateFieldTest.js	/^    describe('getTemplateValue()', function() {$/;"	f
function	tests/lib/Field/TemplateFieldTest.js	/^    describe('template()', function() {$/;"	f
function	tests/lib/Utils/orderElementTest.js	/^                {order: function () { return 0; }, name: 'field2'},$/;"	f
function	tests/lib/Utils/orderElementTest.js	/^                {order: function () { return 1; }, name: 'field1'},$/;"	f
function	tests/lib/Utils/orderElementTest.js	/^                {order: function () { return 3; }, name: 'field3'}$/;"	f
function	tests/lib/View/ListViewTest.js	/^    describe('getFilterReferences()', function() {$/;"	f
function	tests/lib/View/ListViewTest.js	/^    describe('listActions()', function () {$/;"	f
function	tests/lib/View/ListViewTest.js	/^    describe('map()', function () {$/;"	f
function	tests/lib/View/ViewTest.js	/^            field1.validation().validator = function () {$/;"	f
function	tests/lib/View/ViewTest.js	/^            field1.validation().validator = function (value) {$/;"	f
function	tests/lib/View/ViewTest.js	/^            field1.validation().validator = function (value, all) {$/;"	f
function	tests/lib/View/ViewTest.js	/^            field2.validation().validator = function () {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe("validate()", function () {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('addField()', function() {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('description()', function() {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('fields()', function() {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('getReferences()', function() {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('identifier()', function() {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('name()', function() {$/;"	f
function	tests/lib/View/ViewTest.js	/^    describe('title()', function() {$/;"	f
function	tests/mock/PromisesResolver.js	/^    allEvenFailed: function() { return buildPromise([]); },$/;"	f
function	tests/mock/PromisesResolver.js	/^    empty: function() { return buildPromise(); }$/;"	f
getAll	lib/Queries/ReadQueries.js	/^    getAll(view, page, filterValues, sortField, sortDir) {$/;"	f
getAllReferencedData	lib/Queries/ReadQueries.js	/^    getAllReferencedData(references, search) {$/;"	f
getChildByTitle	lib/Menu/Menu.js	/^    getChildByTitle(title) {$/;"	f
getChoices	lib/DataStore/DataStore.js	/^    getChoices(field) {$/;"	f
getCssClasses	lib/Field/Field.js	/^    getCssClasses(entry) {$/;"	f
getDataStore	lib/Factory.js	/^    getDataStore() {$/;"	f
getEntity	lib/Application.js	/^    getEntity(entityName) {$/;"	f
getEntity	lib/View/View.js	/^    getEntity() {$/;"	f
getEntityNames	lib/Application.js	/^    getEntityNames() {$/;"	f
getEntries	lib/DataStore/DataStore.js	/^    getEntries(name) {$/;"	f
getEntryConstructor	lib/Factory.js	/^    getEntryConstructor() {$/;"	f
getErrorMessage	lib/Application.js	/^    getErrorMessage(response) {$/;"	f
getErrorMessage	lib/Entity/Entity.js	/^    getErrorMessage(response) {$/;"	f
getErrorMessage	lib/View/View.js	/^    getErrorMessage(response) {$/;"	f
getErrorMessageFor	lib/Application.js	/^    getErrorMessageFor(view, response) {$/;"	f
getField	lib/View/View.js	/^    getField(fieldName) {$/;"	f
getFieldConstructor	lib/Factory.js	/^    getFieldConstructor(name) {$/;"	f
getFields	lib/View/View.js	/^    getFields() {$/;"	f
getFieldsOfType	lib/View/View.js	/^    getFieldsOfType(type) {$/;"	f
getFilterReferences	lib/View/ListView.js	/^    getFilterReferences(withRemoteComplete) {$/;"	f
getFilteredReferenceData	lib/Queries/ReadQueries.js	/^    getFilteredReferenceData(references, rawValues) {$/;"	f
getGridColumns	lib/Field/ReferencedListField.js	/^    getGridColumns() {$/;"	f
getIdentifierValues	lib/Field/ReferenceField.js	/^    getIdentifierValues(rawValues) {$/;"	f
getLabelForChoice	lib/Field/ChoiceField.js	/^    getLabelForChoice(value, entry) {$/;"	f
getMappedValue	lib/Field/Field.js	/^    getMappedValue(value, entry) {$/;"	f
getNonOptimizedReferences	lib/Field/ReferencedListField.js	/^    getNonOptimizedReferences(withRemoteComplete) {$/;"	f
getNonOptimizedReferences	lib/Utils/ReferenceExtractor.js	/^    getNonOptimizedReferences(fields, withRemoteComplete) {$/;"	f
getNonOptimizedReferences	lib/View/View.js	/^    getNonOptimizedReferences(withRemoteComplete) {$/;"	f
getOne	lib/Queries/ReadQueries.js	/^    getOne(entity, viewType, identifierValue, identifierName, url) {$/;"	f
getOptimizedReferenceData	lib/Queries/ReadQueries.js	/^    getOptimizedReferenceData(references, rawValues) {$/;"	f
getOptimizedReferences	lib/Field/ReferencedListField.js	/^    getOptimizedReferences(withRemoteComplete) {$/;"	f
getOptimizedReferences	lib/Utils/ReferenceExtractor.js	/^    getOptimizedReferences(fields, withRemoteComplete) {$/;"	f
getOptimizedReferences	lib/View/View.js	/^    getOptimizedReferences(withRemoteComplete) {$/;"	f
getPromisesResolver	lib/Factory.js	/^    getPromisesResolver() {$/;"	f
getRawValues	lib/Queries/ReadQueries.js	/^    getRawValues(entity, viewName, viewType, page, perPage, filterValues, filterFields, sortField, sortDir, url) {$/;"	f
getReadQueries	lib/Factory.js	/^    getReadQueries(RestWrapper, PromisesResolver, Application) {$/;"	f
getRecordsByIds	lib/Queries/ReadQueries.js	/^    getRecordsByIds(entity, ids) {$/;"	f
getReferenceChoicesById	lib/DataStore/DataStore.js	/^    getReferenceChoicesById(field) {$/;"	f
getReferenceData	lib/Queries/ReadQueries.js	/^    getReferenceData(references, rawValues) {$/;"	f
getReferencedListData	lib/Queries/ReadQueries.js	/^    getReferencedListData(referencedLists, sortField, sortDir, entityId) {$/;"	f
getReferencedLists	lib/Utils/ReferenceExtractor.js	/^    getReferencedLists(fields) {$/;"	f
getReferencedLists	lib/View/View.js	/^    getReferencedLists() {$/;"	f
getReferences	lib/Field/ReferencedListField.js	/^    getReferences(withRemoteComplete) {$/;"	f
getReferences	lib/Utils/ReferenceExtractor.js	/^    getReferences(fields, withRemoteComplete, optimized = null) {$/;"	f
getReferences	lib/View/View.js	/^    getReferences(withRemoteComplete) {$/;"	f
getRouteFor	lib/Application.js	/^    getRouteFor(entity, viewUrl, viewType, identifierValue, identifierName) {$/;"	f
getSingleApiCall	lib/Field/ReferenceField.js	/^    getSingleApiCall(identifiers) {$/;"	f
getSortFieldName	lib/Field/ReferenceField.js	/^    getSortFieldName() {$/;"	f
getSortFieldName	lib/Field/ReferencedListField.js	/^    getSortFieldName() {$/;"	f
getSortFieldName	lib/View/ListView.js	/^    getSortFieldName() {$/;"	f
getTemplateValue	lib/Field/Field.js	/^    getTemplateValue(data) {$/;"	f
getTemplateValueWithLabel	lib/Field/Field.js	/^    getTemplateValueWithLabel(data) {$/;"	f
getTransformedValue	lib/Field/Field.js	/^    getTransformedValue(value, entry) {$/;"	f
getUrl	lib/Entity/Entity.js	/^    getUrl(viewType, identifierValue, identifierName) {$/;"	f
getUrl	lib/View/View.js	/^    getUrl(identifierValue) {$/;"	f
getViewByEntityAndType	lib/Application.js	/^    getViewByEntityAndType(entityName, type) {$/;"	f
getViewsOfType	lib/Application.js	/^    getViewsOfType(type) {$/;"	f
getWriteQueries	lib/Factory.js	/^    getWriteQueries(RestWrapper, PromisesResolver, Application) {$/;"	f
hasChild	lib/Menu/Menu.js	/^    hasChild() {$/;"	f
hasCollections	lib/Dashboard.js	/^    hasCollections() {$/;"	f
hasEntity	lib/Application.js	/^    hasEntity(fieldName) {$/;"	f
hasFields	lib/View/View.js	/^    hasFields() {$/;"	f
hasMaps	lib/Field/Field.js	/^    hasMaps() {$/;"	f
hasSingleApiCall	lib/Field/ReferenceField.js	/^    hasSingleApiCall() {$/;"	f
hasTranforms	lib/Field/Field.js	/^    hasTranforms() {$/;"	f
header	lib/Application.js	/^    header(header) {$/;"	f
i	lib/Utils/objectProperties.js	/^ *     \/\/ { a: 1, 'b.c': 2, 'd.e': 3, 'd.f.g': 4, 'd.f.h': 5, i: { j: 6 } } }$/;"	o
icon	lib/Menu/Menu.js	/^    icon() {$/;"	f
icon	lib/View/MenuView.js	/^    icon() {$/;"	f
identifier	lib/Entity/Entity.js	/^    identifier(value) {$/;"	f
identifier	lib/View/View.js	/^    identifier() {$/;"	f
identifierValue	lib/Entry.js	/^    get identifierValue() {$/;"	f
if	lib/Application.js	/^                if (!this._dashboard) {$/;"	f
if	lib/Application.js	/^            if (!this._menu) {$/;"	f
if	lib/Application.js	/^            if (identifierValue != null) {$/;"	f
if	lib/Application.js	/^        if (!arguments.length) {$/;"	f
if	lib/Application.js	/^        if (!entity) {$/;"	f
if	lib/Application.js	/^        if (!foundEntity) {$/;"	f
if	lib/Application.js	/^        if (!url) {$/;"	f
if	lib/Application.js	/^        if (typeof body === 'object') {$/;"	f
if	lib/Collection.js	/^        if (!this._name) {$/;"	f
if	lib/Dashboard.js	/^        if (arguments.length) {$/;"	f
if	lib/DataStore/DataStore.js	/^            } else if (fillSimpleReference && identifier != null && identifier in choices) {$/;"	f
if	lib/Entity/Entity.js	/^        if (arguments.length) {$/;"	f
if	lib/Entity/Entity.js	/^        if (this._label === null) {$/;"	f
if	lib/Entry.js	/^            if (fieldName in restEntry) {$/;"	f
if	lib/Factory.js	/^        if (entity) {$/;"	f
if	lib/Field/DateField.js	/^            if (date instanceof Date) {$/;"	f
if	lib/Field/EmbeddedListField.js	/^        if (!arguments.length) {$/;"	f
if	lib/Field/EmbeddedListField.js	/^        if (arguments.length) {$/;"	f
if	lib/Field/Field.js	/^            if (validation[property] === null) {$/;"	f
if	lib/Field/Field.js	/^            if(arguments[1] !== true) {$/;"	f
if	lib/Field/Field.js	/^        if (!arguments.length) {$/;"	f
if	lib/Field/Field.js	/^        if (!this._cssClasses) {$/;"	f
if	lib/Field/Field.js	/^        if (arguments.length) {$/;"	f
if	lib/Field/Field.js	/^        if (this._cssClasses.constructor === Array) {$/;"	f
if	lib/Field/Field.js	/^        if (this._detailLink === null) {$/;"	f
if	lib/Field/Field.js	/^        if (this._label === null) {$/;"	f
if	lib/Field/ReferenceField.js	/^            if (identifier == null) {$/;"	f
if	lib/Field/ReferenceField.js	/^            if (identifier instanceof Array) {$/;"	f
if	lib/Field/ReferenceField.js	/^        if (!arguments.length) {$/;"	f
if	lib/Field/ReferenceField.js	/^        if (arguments.length) {$/;"	f
if	lib/Field/ReferenceField.js	/^        if (options) {$/;"	f
if	lib/Field/ReferencedListField.js	/^        if (!arguments.length) {$/;"	f
if	lib/Menu/Menu.js	/^            if (this._activeFunc == alwaysFalse) {$/;"	f
if	lib/Menu/Menu.js	/^        if (arguments.length) {$/;"	f
if	lib/Queries/ReadQueries.js	/^                        if (response.status == 'error') {$/;"	f
if	lib/Queries/ReadQueries.js	/^                    if (!data.length) {$/;"	f
if	lib/Queries/ReadQueries.js	/^                    if (response.status == 'error') {$/;"	f
if	lib/Queries/ReadQueries.js	/^                if (options.searchQuery) {$/;"	f
if	lib/Queries/ReadQueries.js	/^                if (responses.length === 0) {$/;"	f
if	lib/Queries/ReadQueries.js	/^            if (search) {$/;"	f
if	lib/Queries/ReadQueries.js	/^        if (!ids || !ids.length) {$/;"	f
if	lib/Queries/ReadQueries.js	/^        if (page !== -1) {$/;"	f
if	lib/Utils/PromisesResolver.js	/^                        if (!states[i]) {$/;"	f
if	lib/Utils/PromisesResolver.js	/^            if (promises.length === 0) {$/;"	f
if	lib/Utils/ReferenceExtractor.js	/^        if (optimized !== null) {$/;"	f
if	lib/Utils/ReferenceExtractor.js	/^        if (withRemoteComplete === true) {$/;"	f
if	lib/Utils/ReferenceExtractor.js	/^        } else if (withRemoteComplete === false) {$/;"	f
if	lib/Utils/objectProperties.js	/^    if (typeof object !== 'object') {$/;"	f
if	lib/Utils/stringUtils.js	/^        if (!text) {$/;"	f
if	lib/View/DashboardView.js	/^        if (!this._name) {$/;"	f
if	lib/View/ListView.js	/^        if (!arguments.length) { return this._perPage; }$/;"	f
if	lib/View/ListView.js	/^        if (!arguments.length) { return this.perPage(); }$/;"	f
if	lib/View/ListView.js	/^        if (!arguments.length) {$/;"	f
if	lib/View/ListView.js	/^        if (arguments.length) {$/;"	f
if	lib/View/ListView.js	/^        if (filterFunction !== null) {$/;"	f
if	lib/View/ListView.js	/^        if (withRemoteComplete === true) {$/;"	f
if	lib/View/ListView.js	/^        } else if (withRemoteComplete === false) {$/;"	f
if	lib/View/MenuView.js	/^        if (arguments.length) {$/;"	f
if	lib/View/MenuView.js	/^        if (this._icon === null) {$/;"	f
if	lib/View/View.js	/^            if (typeof validation.validator === 'function') {$/;"	f
if	lib/View/View.js	/^        if (!arguments.length) {$/;"	f
if	lib/View/View.js	/^        if (!this._name) {$/;"	f
if	lib/View/View.js	/^        if (arg.constructor.name === 'Object') {$/;"	f
if	lib/View/View.js	/^        if (arguments.length) {$/;"	f
if	tests/lib/Queries/ReadQueriesTest.js	/^                if (id) {$/;"	f
if	tests/lib/Queries/WriteQueriesTest.js	/^                if (id) {$/;"	f
if	tests/mock/mixins.js	/^                if (result && result.then) {$/;"	f
indexByName	lib/Utils/ReferenceExtractor.js	/^    indexByName(references) {$/;"	f
infinitePagination	lib/View/ListView.js	/^    infinitePagination() {$/;"	f
instead	lib/View/MenuView.js	/^            console.warn('entity.menuView() is deprecated. Please use the Menu class instead');$/;"	c
isActive	lib/Menu/Menu.js	/^    isActive(url) {$/;"	f
isChildActive	lib/Menu/Menu.js	/^    isChildActive(url) {$/;"	f
isDetailLink	lib/Field/Field.js	/^    isDetailLink(detailLink) {$/;"	f
isEnabled	lib/View/View.js	/^    isEnabled() {$/;"	f
isLink	lib/Menu/Menu.js	/^    isLink() {$/;"	f
isObject	lib/Utils/objectProperties.js	/^function isObject(value) {$/;"	f
isReadOnly	lib/Entity/Entity.js	/^    get isReadOnly() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should not consider protocol relative URL as a relative path', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should not prepend baseApiUrl when the URL begins with http', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return all entity names.', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return entity name by default', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return ordered views of type', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the error message defined globally', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the global message with a simple string as body', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the global message with an object as body', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the message defined by the entity', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the message defined by the view', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the url specified in a view', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the url specified in the app when the URL is not specified in the view nor in the entity', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the url specified in the entity when the URL is not specified in the view', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should return the url specified in the entity when the app also define a base URL', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should store entity by name.', function () {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use both the baseApiUrl and the entity url if the entity url is relative', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use only the entity url if the entity url is absolute', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use the application baseApiUrl when provided', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use the entity baseApiUrl when both the application and entity baseApiUrl are provided', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use the entity baseApiUrl when provided', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use the entity url function when provided', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should use the entity url string when provided', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('should work for zero indentifier', function() {$/;"	f
it	tests/lib/ApplicationTest.js	/^        it('using function without argument should be as getter', function() {$/;"	f
it	tests/lib/DataStore/DataStore.js	/^        it('should fill reference values of a collection', function () {$/;"	f
it	tests/lib/DataStore/DataStore.js	/^        it('should retrieve choices by id.', function () {$/;"	f
it	tests/lib/DataStore/DataStore.js	/^        it('should retrieve choices.', function () {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should create all views when creating new entity', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should disable all edition views', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should not be read-only by default', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return entity name if no label has been set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return given createMethod if already set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return given deleteMethod if already set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return given label if already set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return given retrieveMethod if already set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return given updateMethod if already set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return null if no createMethod has been set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return null if no deleteMethod has been set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return null if no retrieveMethod has been set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should return null if no updateMethod has been set', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should set custom identifier', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should set default identifier', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should set read-only attribute', function() {$/;"	f
it	tests/lib/Entity/EntityTest.js	/^        it('should throw error on wrong argument', function() {$/;"	f
it	tests/lib/EntryTest.js	/^        it('should return an entry with default values if REST entry is empty', function() {$/;"	f
it	tests/lib/EntryTest.js	/^        it('should return an entry with no value if REST entry is empty and fields is empty', function() {$/;"	f
it	tests/lib/FactoryTest.js	/^        it('should return a string field by default', function() {$/;"	f
it	tests/lib/FactoryTest.js	/^        it('should return new field from given type with correct name if type is registered', function() {$/;"	f
it	tests/lib/FactoryTest.js	/^        it('should throw an error if type has not been already registered', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should accept function values', function () {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should accept string values', function () {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should add a map function', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should allow multiple calls', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should allow to override parts of the validation settings', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should allow to remove parts of the validation settings', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should be based on name if non label has been provided', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should be false if not specified', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should be given value if already provided', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should be true if not specified and if name is "id"', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should concatenate all elements if array', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should have sensible defaults', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return an empty string by default', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return given value if already set, whatever name may be', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return passed classes if neither function nor array', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return result of callback called with entry if function', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return the camelCased name by default', function () {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return the passed transformed by maps', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return the template function executed with the supplied data', function() {$/;"	f
it	tests/lib/Field/FieldTest.js	/^        it('should return the value argument if no maps', function() {$/;"	f
it	tests/lib/Field/ReferenceFieldTest.js	/^        it('Should not return undefined values', function () {$/;"	f
it	tests/lib/Field/ReferenceFieldTest.js	/^        it('Should return identifier values', function () {$/;"	f
it	tests/lib/Field/ReferenceFieldTest.js	/^        it('should be a detail link by default', function() {$/;"	f
it	tests/lib/Field/ReferenceFieldTest.js	/^        it('should retrieve sortField', function () {$/;"	f
it	tests/lib/Field/ReferenceFieldTest.js	/^    it('Should create a fake view to keep entity', function () {$/;"	f
it	tests/lib/Field/ReferencedListFieldTest.js	/^    it('should retrieve referenceMany fields.', function () {$/;"	f
it	tests/lib/Field/ReferencedListFieldTest.js	/^    it('should return information about grid column.', function () {$/;"	f
it	tests/lib/Field/ReferencedListFieldTest.js	/^    it('should store target entity configuration', function () {$/;"	f
it	tests/lib/Field/TemplateFieldTest.js	/^        it('should accept function values', function () {$/;"	f
it	tests/lib/Field/TemplateFieldTest.js	/^        it('should accept string values', function () {$/;"	f
it	tests/lib/Field/TemplateFieldTest.js	/^        it('should return the template function executed with the supplied data', function() {$/;"	f
it	tests/lib/Queries/ReadQueriesTest.js	/^        it('should return a promise with array of all retrieved records', function(done) {$/;"	f
it	tests/lib/Queries/ReadQueriesTest.js	/^        it('should return promise with empty result if no ids are passed', function(done) {$/;"	f
it	tests/lib/View/ListViewTest.js	/^        it('should apply the function argument to all list values', function () {$/;"	f
it	tests/lib/View/ListViewTest.js	/^        it('should return only filter reference with no remote complete if withRemoteComplete is set to false', function() {$/;"	f
it	tests/lib/View/ListViewTest.js	/^        it('should return only filter reference with refresh complete if withRemoteComplete is true', function() {$/;"	f
it	tests/lib/View/ListViewTest.js	/^        it('should return only reference and reference_many fields', function() {$/;"	f
it	tests/lib/View/ListViewTest.js	/^        it('should return the view', function () {$/;"	f
it	tests/lib/View/ListViewTest.js	/^        it('should store the listActions for the Datagrid', function () {$/;"	f
it	tests/lib/View/MenuViewTest.js	/^        it('should be given icon otherwise', function() {$/;"	f
it	tests/lib/View/MenuViewTest.js	/^        it('should default to list glyphicon', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should add a single field when called with a non array argument', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should add field collections', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should add fields and preserve the order', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should add fields when called with a nested array argument', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should add fields when called with an array argument', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should add fields when called with several arguments', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should allow fields reuse', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should append fields when multiple calls', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should call validator on each fields.', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should call validator with the all other fields as second parameter', function (done) {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should call validator with the targeted field as first parameter', function (done) {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should keep the default order of the given array to equal to the index even when more than 10 fields', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return a default name based on the entity name and view type', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return empty string by default', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return entries based on an array of objects', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return false by default', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return only reference and reference_many fields', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return only reference with no remote complete if withRemoteComplete is false', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return only reference with remote complete if withRemoteComplete is true', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return the fields when called with no arguments', function() {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return the identifier.', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return the view description', function () {$/;"	f
it	tests/lib/View/ViewTest.js	/^        it('should return the view title', function () {$/;"	f
label	lib/Entity/Entity.js	/^    label() {$/;"	f
label	lib/Field/Field.js	/^    label() {$/;"	f
layout	lib/Application.js	/^    layout(layout) {$/;"	f
limit	lib/View/ListView.js	/^    limit() {$/;"	f
link	lib/Menu/Menu.js	/^    link() {$/;"	f
listActions	lib/Field/EmbeddedListField.js	/^    listActions(actions) {$/;"	f
listActions	lib/Field/ReferencedListField.js	/^    listActions(actions) {$/;"	f
listActions	lib/View/ListView.js	/^    listActions(actions) {$/;"	f
listValues	lib/Entry.js	/^        this.listValues = {};$/;"	o
listView	lib/Entity/Entity.js	/^    listView() {$/;"	f
map	lib/DataStore/DataStore.js	/^        return this.getEntries(field.targetEntity().uniqueId + '_choices').map(function(entry) {$/;"	f
map	lib/Field/Field.js	/^    map(fn) {$/;"	f
map	lib/Queries/WriteQueries.js	/^        let promises = entityIds.map(function (id) {$/;"	f
map	lib/View/View.js	/^        [].slice.call(arguments).map(function(argument) {$/;"	f
map	lib/View/View.js	/^        this._fields.map(function (field) {$/;"	f
map	tests/lib/Field/FieldTest.js	/^                .map(function add1(a) { return a + 1; })$/;"	f
map	tests/lib/Field/FieldTest.js	/^                .map(function times2(a) { return a * 2; });$/;"	f
map	tests/lib/View/ListViewTest.js	/^                .addField(new Field('name').map(function (value) {$/;"	f
map	tests/lib/View/ViewTest.js	/^            fields.map(function (field, index) {$/;"	f
map	tests/lib/View/ViewTest.js	/^            var fields = Array.from(new Array(11).keys()).map(function (i) {$/;"	f
mapEntries	lib/View/View.js	/^    mapEntries(restEntries) {$/;"	f
mapEntry	lib/View/View.js	/^    mapEntry(restEntry) {$/;"	f
menu	lib/Application.js	/^    menu(menu) {$/;"	f
menu	lib/Factory.js	/^    menu(entity) {$/;"	f
menuView	lib/Entity/Entity.js	/^    menuView() {$/;"	f
mocha	package.json	/^    "mocha": "^2.2.5",$/;"	f
name	lib/Entity/Entity.js	/^    name() {$/;"	f
name	lib/Field/Field.js	/^    name() {$/;"	f
name	lib/View/View.js	/^    name(name) {$/;"	f
name	package.json	/^  "name": "admin-config",$/;"	f
node	package.json	/^    "node": ">=0.10.0"$/;"	f
order	lib/Entity/Entity.js	/^    order(order) {$/;"	f
order	lib/Field/Field.js	/^    order() {$/;"	f
order	lib/Utils/orderElement.js	/^    order: function (input) {$/;"	m
order	lib/View/View.js	/^    order(order) {$/;"	f
order	tests/lib/Utils/orderElementTest.js	/^                {order: function () { return 0; }, name: 'field2'},$/;"	m
order	tests/lib/Utils/orderElementTest.js	/^                {order: function () { return 1; }, name: 'field1'},$/;"	m
order	tests/lib/Utils/orderElementTest.js	/^                {order: function () { return 3; }, name: 'field3'}$/;"	m
parse	lib/Field/DateField.js	/^        this._parse = function(date) {$/;"	f
parse	lib/Field/DateField.js	/^    parse(value) {$/;"	f
parse	lib/Field/DateTimeField.js	/^        this._parse = function(date) {$/;"	f
perPage	lib/Field/ReferenceField.js	/^    perPage(perPage) {$/;"	f
perPage	lib/View/ListView.js	/^    perPage() {$/;"	f
permanentFilters	lib/Field/EmbeddedListField.js	/^    permanentFilters(filters) {$/;"	f
permanentFilters	lib/Field/ReferenceField.js	/^    permanentFilters(filters) {$/;"	f
permanentFilters	lib/View/ListView.js	/^    permanentFilters(filters) {$/;"	f
pinned	lib/Field/Field.js	/^    pinned(pinned) {$/;"	f
populateFromEntity	lib/Menu/Menu.js	/^    populateFromEntity(entity) {$/;"	f
prepare	lib/View/View.js	/^    prepare(prepare) {$/;"	f
private	package.json	/^  "private": false,$/;"	f
readOnly	lib/Entity/Entity.js	/^    readOnly() {$/;"	f
reduce	lib/View/View.js	/^            return arg.reduce(function(previous, current) {$/;"	f
registerFieldType	lib/Factory.js	/^    registerFieldType(name, constructor) {$/;"	f
remoteComplete	lib/Field/ReferenceField.js	/^    remoteComplete(remoteComplete, options) {$/;"	f
remoteCompleteOptions	lib/Field/ReferenceField.js	/^    remoteCompleteOptions(options) {$/;"	f
removeFields	lib/View/View.js	/^    removeFields() {$/;"	f
repository	package.json	/^  "repository": {$/;"	f
resolveError	lib/Utils/PromisesResolver.js	/^                function resolveError(result) {$/;"	f
resolveState	lib/Utils/PromisesResolver.js	/^                function resolveState(result) {$/;"	f
resolveSuccess	lib/Utils/PromisesResolver.js	/^                function resolveSuccess(result) {$/;"	f
result	tests/lib/Queries/ReadQueriesTest.js	/^                { status: 'success', result: { data: [comments[0]] } }$/;"	o
result	tests/lib/Queries/ReadQueriesTest.js	/^                {status: 'success', result: { data: rawAuthors }}$/;"	o
result	tests/lib/Queries/ReadQueriesTest.js	/^                {status: 'success', result: { data: rawCats }}$/;"	o
retrieveMethod	lib/Entity/Entity.js	/^    retrieveMethod(retrieveMethod) {$/;"	f
return	tests/mock/mixins.js	/^    return (function() {$/;"	f
sanitize	lib/Field/WysiwygField.js	/^    sanitize(value) {$/;"	f
scripts	package.json	/^  "scripts": {$/;"	f
searchQuery	lib/Field/ReferenceField.js	/^     *               searchQuery: function(search) { return { q: search }; }$/;"	m
setEntity	lib/Collection.js	/^    setEntity(entity) {$/;"	f
setEntity	lib/View/DashboardView.js	/^    setEntity(entity) {$/;"	f
setEntity	lib/View/View.js	/^    setEntity(entity) {$/;"	f
setEntries	lib/DataStore/DataStore.js	/^    setEntries(name, entries) {$/;"	f
showView	lib/Entity/Entity.js	/^    showView() {$/;"	f
singleApiCall	lib/Field/ReferenceField.js	/^    singleApiCall(singleApiCall) {$/;"	f
sinon	package.json	/^    "sinon": "^1.14.1"$/;"	f
sortDir	lib/Field/EmbeddedListField.js	/^    sortDir() {$/;"	f
sortDir	lib/Field/ReferenceField.js	/^    sortDir() {$/;"	f
sortDir	lib/View/ListView.js	/^    sortDir() {$/;"	f
sortField	lib/Field/EmbeddedListField.js	/^    sortField() {$/;"	f
sortField	lib/Field/ReferenceField.js	/^    sortField() {$/;"	f
sortField	lib/View/ListView.js	/^    sortField() {$/;"	f
string	tests/lib/Field/FieldTest.js	/^        it('should return an class string as set by cssClasses(array)', function() {$/;"	c
string	tests/lib/Field/FieldTest.js	/^        it('should return an class string as set by cssClasses(function)', function() {$/;"	c
string	tests/lib/Field/FieldTest.js	/^        it('should return an class string as set by cssClasses(string)', function() {$/;"	c
stripTags	lib/Field/WysiwygField.js	/^    stripTags(value) {$/;"	f
stub	tests/lib/Queries/ReadQueriesTest.js	/^            var spy = sinon.stub(readQueries, 'getOne', function(entity, viewType, identifierValue) {$/;"	f
stub	tests/lib/Queries/ReadQueriesTest.js	/^            var spy = sinon.stub(readQueries, 'getRawValues', function(entity, viewType, identifierValue) {$/;"	f
targetEntity	lib/Field/EmbeddedListField.js	/^    targetEntity(entity) {$/;"	f
targetEntity	lib/Field/ReferenceField.js	/^    targetEntity(entity) {$/;"	f
targetField	lib/Field/ReferenceField.js	/^    targetField(field) {$/;"	f
targetFields	lib/Field/EmbeddedListField.js	/^    targetFields(value) {$/;"	f
targetFields	lib/Field/ReferencedListField.js	/^    targetFields(value) {$/;"	f
targetReferenceField	lib/Field/ReferencedListField.js	/^    targetReferenceField(value) {$/;"	f
template	lib/Dashboard.js	/^    template(template) {$/;"	f
template	lib/Field/Field.js	/^    template(template, templateIncludesLabel = false) {$/;"	f
template	lib/Menu/Menu.js	/^    template() {$/;"	f
template	lib/View/View.js	/^    template(template) {$/;"	f
template	tests/lib/Field/FieldTest.js	/^            var field = new Field().template(function () { return 'hello function !'; });$/;"	f
template	tests/lib/Field/FieldTest.js	/^            var field = new Field().template(function (name) { return 'hello ' + name + ' !'; });$/;"	f
template	tests/lib/Field/TemplateFieldTest.js	/^            var field = new TemplateField().template(function () { return 'hello function !'; });$/;"	f
template	tests/lib/Field/TemplateFieldTest.js	/^            var field = new TemplateField().template(function (name) { return 'hello ' + name + ' !'; });$/;"	f
templateIncludesLabel	lib/Field/Field.js	/^    templateIncludesLabel(templateIncludesLabel) {$/;"	f
test	package.json	/^    "test": "make test"$/;"	f
then	tests/lib/Queries/ReadQueriesTest.js	/^            readQueries.getRecordsByIds(humanEntity, [1, 2]).then(function(records) {$/;"	f
then	tests/lib/Queries/ReadQueriesTest.js	/^            readQueries.getRecordsByIds(humanEntity, []).then(function(records) {$/;"	f
throw	tests/lib/Entity/EntityTest.js	/^            assert.throw(function () { new Entity('post').identifier('my_id'); }, Error, 'Entity post: identifier must be an instance of Field');$/;"	f
throw	tests/lib/View/ViewTest.js	/^            assert.throw(function () { view.validate(entry); }, Error, 'Field "Complex" is not valid.');$/;"	f
title	lib/Application.js	/^    title(title) {$/;"	f
title	lib/Menu/Menu.js	/^    title() {$/;"	f
title	lib/View/View.js	/^    title(title) {$/;"	f
transform	lib/Field/Field.js	/^    transform(fn) {$/;"	f
transformEntry	lib/View/View.js	/^    transformEntry(entry) {$/;"	f
transformToRest	lib/Entry.js	/^    transformToRest(fields) {$/;"	f
type	lib/Field/Field.js	/^    type() {$/;"	f
type	lib/View/View.js	/^    get type() {$/;"	f
type	package.json	/^    "type": "git",$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'reference' }, name() { return 'bar' } }$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'reference' }, name() { return 'foo' } },$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'reference_many' }, name() { return 'bar' } },$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'referenced_list' }, name() { return 'bar' } }$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'referenced_list' }, name() { return 'baz' } },$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'referenced_list' }, name() { return 'foo' } },$/;"	f
type	tests/lib/Utils/ReferenceExtractorTest.js	/^                { type() { return 'string' }, name() { return 'boo' } }$/;"	f
uniqueId	lib/Entity/Entity.js	/^    get uniqueId() {$/;"	f
updateMethod	lib/Entity/Entity.js	/^    updateMethod(updateMethod) {$/;"	f
updateOne	lib/Queries/WriteQueries.js	/^    updateOne(view, rawEntity, originEntityId) {$/;"	f
uploadInformation	lib/Field/FileField.js	/^    uploadInformation(information) {$/;"	f
url	lib/Entity/Entity.js	/^    url(url) {$/;"	f
url	lib/View/View.js	/^    url(url) {$/;"	f
url	package.json	/^    "url": "git:\/\/github.com\/marmelab\/admin-config.git"$/;"	f
url	tests/lib/ApplicationTest.js	/^            entity.url(function(entityName, viewType, identifierValue) {$/;"	f
url	tests/lib/ApplicationTest.js	/^            entity1.url(function (entityName, viewType, identifierValue) {$/;"	f
url	tests/lib/ApplicationTest.js	/^            view.url(function (entityId) {$/;"	f
validate	lib/View/View.js	/^    validate(entry) {$/;"	f
validation	lib/Field/Field.js	/^    validation(validation) {$/;"	f
validator	tests/lib/View/ViewTest.js	/^            field1.validation().validator = function () {$/;"	f
validator	tests/lib/View/ViewTest.js	/^            field1.validation().validator = function (value) {$/;"	f
validator	tests/lib/View/ViewTest.js	/^            field1.validation().validator = function (value, all) {$/;"	f
validator	tests/lib/View/ViewTest.js	/^            field2.validation().validator = function () {$/;"	f
values	tests/lib/DataStore/DataStore.js	/^                {values: { id: 1, human_id: 1, name: 'Suna'}},$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: { id: 2, human_id: 2, name: 'Boby'}},$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: { id: 3, human_id: 1, name: 'Mizute'}}$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: {id: 1, label: 'Photo'}},$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: {id: 1, name: 'Bob'}},$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: {id: 2, label: 'Watch'}},$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: {id: 2, name: 'Daniel'}},$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: {id: 3, label: 'Panda'}}$/;"	o
values	tests/lib/DataStore/DataStore.js	/^                {values: {id: 3, name: 'Jack'}}$/;"	o
values	tests/lib/View/ViewTest.js	/^            entry.values = {$/;"	o
version	package.json	/^  "version": "0.7.1",$/;"	f
views	lib/Entity/Entity.js	/^    get views() {$/;"	f
